"""Strelka2 module of CGR germline variant calling pipeline
"""

if clusterMode == "gcp" or useRemoteFiles:
    from snakemake.remote.GS import RemoteProvider as GSRemoteProvider
    GS = GSRemoteProvider()
	

rule strelka_bgZipBedFiles:
    input:
        bedFile="split_regions/{chrom}.bed",
    output:
        bedFileGZ="split_regions/{chrom}.bed.gz",
        bedFileGZ_IDX="split_regions/{chrom}.bed.gz.tbi",
    benchmark:
        "run_times/strelka_bgZipBedFiles/{chrom}.tsv"
    conda:
        "../envs/environment.yaml"
    singularity:
        "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "bgzip -c {input.bedFile} >{input.bedFile}.gz; tabix -p bed {input.bedFile}.gz;"


rule strelka2_callVariant:
    input:
        ref=path_sanitize(refGenome),
        ref_index=path_sanitize(refGenome + ".fai") ,
        #bam=lambda wc: path_sanitize(sample2bam[wc.sample]),
        #bai=lambda wc: path_sanitize(sample2bamIndex[wc.sample]),
        bam=lambda wc: sample2bam[wc.sample],
        bai=lambda wc: sample2bamIndex[wc.sample],
        bedFileGZ="split_regions/{chrom}.bed.gz" if by_chrom else bedFileGZ,
        bedFileGZ_index="split_regions/{chrom}.bed.gz.tbi" if by_chrom else bedFileGZ + ".tbi",
    output:
        gvcf=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/{sample}.S1.vcf.gz"
            if by_chrom
            else outputDir + "strelka2/called/genome.{sample}.vcf.gz"
        ),
        gvcf_tbi=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/{sample}.S1.vcf.gz.tbi"
            if by_chrom
            else outputDir + "strelka2/called/genome.{sample}.vcf.gz.tbi"
        ),
        variant_vcf=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/variants.vcf.gz"
            if by_chrom
            else outputDir + "strelka2/calledBySample/{sample}/results/variants/variants.vcf.gz"
        ),
        variant_vcf_index=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/variants.vcf.gz.tbi"
            if by_chrom
            else outputDir + "strelka2/calledBySample/{sample}/results/variants/variants.vcf.gz.tbi"
        ),
    params:
        runDir=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}"
            if by_chrom
            else outputDir + "strelka2/calledBySample/{sample}"
        ),
        exome_param=exome_param,
        threads=threads,
        memGB=strelka2_memGB,
        genome_vcf=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/genome.S1.vcf.gz"
            if by_chrom
            else outputDir + "strelka2/calledBySample/{sample}/results/variants/genome.S1.vcf.gz"
        ),
        genome_vcf_index=(
            outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/genome.S1.vcf.gz.tbi"
            if by_chrom
            else outputDir + "strelka2/calledBySample/{sample}/results/variants/genome.S1.vcf.gz.tbi"
        )
    resources:
        #machine_type="n1-standard-8",
        #runtime=2880,
        mem_mb=strelka2_memGB*1000
    threads: 8
    benchmark:
        "run_times/strelka_callVariantByChrom/{chrom}/{sample}.tsv" if by_chrom else "run_times/strelka2_callVariant/{sample}.tsv"
    conda:
        "../envs/strelka.yaml"
    singularity: 'docker://quay.io/biocontainers/strelka:2.9.10--0'     
    log:
        "logs/strelka2_callVariant/strelka2_callVariant.{chrom}.{sample}.log" if by_chrom else "logs/strelka2_callVariant/strelka2_callVariant.{sample}.log",
    shell:
        "[ -d {params.runDir} ] && rm -rf {params.runDir};"
        "configureStrelkaGermlineWorkflow.py --bam {input.bam} --ref {input.ref} {params.exome_param} \
                                --callRegions {input.bedFileGZ} --runDir {params.runDir} && \
                              {params.runDir}/runWorkflow.py -m local -j {params.threads} -g {params.memGB}"
        "mv {params.genome_vcf} {output.gvcf};"
        "mv {params.genome_vcf_index} {output.gvcf_tbi};"							  


rule strelka_concatVariantsByChrom:
    input:
        vcf=expand(outputDir + "strelka2/genotyped/strelka2_variants_{chrom}.bcf", chrom=chromList),
        idx=expand(outputDir + "strelka2/genotyped/strelka2_variants_{chrom}.bcf.csi", chrom=chromList),
    output:
        temp(outputDir + "strelka2/genotyped/strelka2_variants.bcf"),
    params:
        temp(directory("strelka2_concat_vcfs/")),
    benchmark:
        "run_times/strelka_concatVariantsByChrom/concatVariantsByChrom.tsv"
    conda:
        "../envs/environment.yaml"
    singularity:
        'docker://quay.io/shukwong/bcftools:2020-12-09'      
    shell:
        "bcftools concat -Ou -a {input.vcf} | bcftools sort -T {params} -Oz -o {output}"


rule strelka_indexBCFByChrom:
    input:
        bcf=outputDir + "strelka2/genotyped/strelka2_variants_{chrom}.bcf",
    output:
        idx=outputDir + "strelka2/genotyped/strelka2_variants_{chrom}.bcf.csi",
    benchmark:
        "run_times/strelka_indexBCFByChrom/{chrom}.tsv"
    singularity:
        'docker://quay.io/shukwong/bcftools:2020-12-09'     
    conda:
        "../envs/environment.yaml"
    shell:
        "bcftools index {input.bcf}"


rule Strelka2_compress_merged_vcfs:
    """
    """
    input:
        outputDir + "strelka2/genotyped/strelka2_variants.bcf",
    output:
        gz=protected(outputDir + "strelka2/genotyped/strelka2_variants.vcf.gz"),
        tbi=protected(outputDir + "strelka2/genotyped/strelka2_variants.vcf.gz.tbi"),
    benchmark:
        "run_times/strelka2_compress_merged_vcfs/strelka2_variants.tsv"
    conda:
        "../envs/environment.yaml"
    singularity:
        'docker://quay.io/shukwong/bcftools:2020-12-09'    
    shell:
        "bcftools view --min-ac 1 {input} | bgzip -c > {output.gz}; tabix -p vcf {output.gz}"


rule Strelka2_GLmerge_gvcfs:
    """Merge Strelka gvcfs into one multi-sample vcf using the glnexus_cli
    The glnexus_cli executable consumes the Strelka genome.vcf files.
    """
    input:
        l=(
            expand(
                outputDir + "strelka2/calledByChrom/{{chrom}}/{sample}/results/variants/{sample}.S1.vcf.gz",
                sample=sampleList,
            )
            if by_chrom
            else expand(outputDir + "strelka2/called/genome.{sample}.vcf.gz", sample=sampleList)
        ),
        m=(
            outputDir + "strelka2/called/gvcfs/{chrom}/manifest.txt"
            if by_chrom
            else outputDir + "strelka2/called/gvcfs/manifest.txt"
        ),
        b=path_sanitize(bedFile),
        glnexusConfig=path_sanitize(glnexus_strelka2_config),
    output:
        outputDir + "strelka2/genotyped/strelka2_variants_{chrom}.bcf" if by_chrom else temp(
            outputDir + "strelka2/genotyped/strelka2_variants.bcf"
        ),
    params:
        workDir=(
            "Strelka2_GLmerge_gvcfs/" + "{chrom}/" if by_chrom
            else "Strelka2_GLmerge_gvcfs/"
        ),
        memGB=glnexus_memGB
    threads: 8    
    resources:
        #machine_type="n1-standard-8",
        #runtime=2880,
        mem_mb=glnexus_memGB*1000
    benchmark:
        "run_times/strelka2_GLmerge_gvcfs/{chrom}/GLmerge.tsv" if by_chrom else "run_times/strelka2_GLmerge_gvcfs/GLmerge.tsv"
    conda:
        "../envs/environment.yaml"
    singularity:
        'docker://quay.io/shukwong/bcftools:2020-12-09'     
    shell:
        "[ -d {params.workDir} ] && rm -rf {params.workDir}; mkdir -p {params.workDir};"
        "if [ ! -f {params.workDir}/glnexus_cli ]; then wget https://github.com/dnanexus-rnd/GLnexus/releases/download/v1.2.7/glnexus_cli -P {params.workDir}; chmod +x {params.workDir}/glnexus_cli; fi;"
        "{params.workDir}/glnexus_cli --config {input.glnexusConfig} --dir {params.workDir}/GLnexus.DB --bed {input.b} --list {input.m} -m {params.memGB} -t {threads} > {output};"
        "rm {params.workDir}/glnexus_cli;"


rule strelka2_create_each_sample_manifest:
    """Create list of files for GLnexus to merge
    """
    input:
        outputDir + "strelka2/calledByChrom/{chrom}/{sample}/results/variants/{sample}.S1.vcf.gz" if by_chrom else outputDir + "strelka2/called/genome.{sample}.vcf.gz",
    output:
        temp(outputDir + "strelka2/called/manifests/{chrom}/{sample}_manifest.txt") if by_chrom else temp(
            outputDir + "strelka2/called/manifests/{sample}_manifest.txt"
        ),
    benchmark:
        "run_times/strelka2_create_sample_manifest/{chrom}/{sample}_manifest.tsv" if by_chrom else "run_times/strelka2_create_sample_manifest/{sample}_manifest.tsv"
    conda:
        "../envs/environment.yaml"
    shell:
        "echo {input} > {output}"


rule strelka2_create_cohort_manifest:
    input:
        expand(
            outputDir + "strelka2/calledByChrom/{{chrom}}/{sample}/results/variants/{sample}.S1.vcf.gz", sample=sampleList, chrom=chromList
        ) if by_chrom else expand(
            outputDir + "strelka2/called/genome.{sample}.vcf.gz", sample=sampleList, chrom=chromList
        ),
    output:
        outputDir + "strelka2/called/gvcfs/{chrom}/manifest.txt" if by_chrom else outputDir + "strelka2/called/gvcfs/manifest.txt",
    benchmark:
        "run_times/strelka2_create_cohort_manifest/{chrom}_manifest.tsv" if by_chrom else "run_times/strelka2_create_cohort_manifest/manifest.tsv"
    params:
        manDir=(
            outputDir + "strelka2/called/manifests/{chrom}/"
            if by_chrom
            else outputDir + "strelka2/called/manifests/"
        ),
    #conda:
        #"../envs/environment.yaml"
    #shell:
        #"for i in {params.manDir}*.txt; do cat $i >> {output}; done"
    run:
        if by_chrom:
            for manDir in output:
                chr = os.path.basename(os.path.dirname(manDir))
                with open(os.path.dirname(manDir) + '/manifest.txt', 'w') as outfile:
                    for item in input:
                        outfile.write("%s\n" % item) 
        else:
            with open(output[0], 'w') as outfile: 
                for item in input:
                    outfile.write("%s\n" % item)		
