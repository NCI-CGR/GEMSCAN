#!/usr/bin/env python3
# Authors: Bari Ballew, Wendy Wong

"""VCF harmonization module of CGR germline variant calling pipeline
"""



if clusterMode == "gcp" or useRemoteFiles:
    from snakemake.remote.GS import RemoteProvider as GSRemoteProvider
    GS = GSRemoteProvider()


rule Strelka2_norm_left_align_split:
    """Normalize, left-align, and split mulit-allelics in the Strelka2 vcf.
    """
    input:
        vcf=outputDir + "strelka2/genotyped/strelka2_variants.vcf.gz",
        i=outputDir + "strelka2/genotyped/strelka2_variants.vcf.gz.tbi",
        ref=path_sanitize(refGenome),
        #ref=refGenome
    output:
        outputDir + "ensemble/strelka2_normalized_{chrom}.vcf.gz" if by_chrom else outputDir + "ensemble/strelka2_normalized.vcf.gz",
    params:
        "-r {chrom}" if by_chrom else ""   
    benchmark:
        outputDir + "run_times/strelka2_norm_left-align_split/norm_{chrom}.tsv" if by_chrom else outputDir + "run_times/strelka2_norm_left-align_split/norm.tsv"
    threads: threads
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "bcftools norm -f {input.ref} {params} -m - --threads {threads} {input.vcf} | bcftools view --min-ac 1 -Oz -o {output}"


rule HC_norm_left_align_split:
    """Normalize, left-align, and split mulit-allelics in the HC vcf.
    """
    input:
        vcf=outputDir + "HaplotypeCaller/genotyped/HC_variants.vcf.gz",
        i=outputDir + "HaplotypeCaller/genotyped/HC_variants.vcf.gz.tbi",
        ref=path_sanitize(refGenome),
    output:
        outputDir + "ensemble/HC_normalized_{chrom}.vcf.gz" if by_chrom else outputDir + "ensemble/HC_normalized.vcf.gz",
    params:
        "-r {chrom}" if by_chrom else ""  
    benchmark:
        outputDir + "run_times/HC_norm_left-align_split/norm_{chrom}.tsv" if by_chrom else outputDir + "run_times/HC_norm_left-align_split/norm.tsv"
    threads: threads
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "bcftools norm -f {input.ref} {params} -m - --threads {threads} {input.vcf} -Oz -o {output}"


rule DV_norm_left_align_split:
    """Normalize, left-align, and split mulit-allelics in the DV vcf.
    """
    input:
        vcf=outputDir + "deepVariant/genotyped/DV_variants.vcf.gz",
        i=outputDir + "deepVariant/genotyped/DV_variants.vcf.gz.tbi",
        ref=path_sanitize(refGenome),
    output:
        outputDir + "ensemble/DV_normalized_{chrom}.vcf.gz" if by_chrom else outputDir + "ensemble/DV_normalized.vcf.gz",
    params:
        "-r {chrom}" if by_chrom else ""         
    benchmark:
        outputDir + "run_times/DV_norm_left-align_split/norm_{chrom}.tsv" if by_chrom else outputDir + "run_times/DV_norm_left-align_split/norm.tsv"
    threads: threads
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:        
        "bcftools norm -f {input.ref} {params} -m - --threads {threads} {input.vcf} -Oz -o {output}"


rule separate_header_and_vars:
    input:
        outputDir + "ensemble/{caller}_normalized_{chrom}.vcf.gz" if by_chrom else outputDir + "ensemble/{caller}_normalized.vcf.gz",
    output:
        h=(temp(outputDir + "ensemble/{caller}_header_{chrom}.vcf") if by_chrom else temp(outputDir + "ensemble/{caller}_header.vcf")),
        v=(temp(outputDir + "ensemble/{caller}_vars_{chrom}.vcf") if by_chrom else temp(outputDir + "ensemble/{caller}_vars.vcf")),
    params:
        "-r {chrom}" if by_chrom else ""         
    benchmark:
        outputDir + "run_times/separate_header_and_vars/{caller}_{chrom}.tsv" if by_chrom else outputDir + "run_times/separate_header_and_vars/{caller}.tsv"
    threads: threads
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "tabix -f -p vcf {input};"    
        "bcftools view {params} --threads {threads} -I -h {input} -Ov -o {output.h};"
        "bcftools view {params} --threads {threads} -I -H {input} -Ov -o {output.v}"


rule prepend_labels:
    """Prepend INFO and FORMAT tags with DV_ or HC_ or strelka2
    Update headers to match.
    Note that this is a bash script with no unit testing implemented.
    """
    input:
        v=(outputDir + "ensemble/{caller}_vars_{chrom}.vcf" if by_chrom else outputDir + "ensemble/{caller}_vars.vcf"),
        h=(outputDir + "ensemble/{caller}_header_{chrom}.vcf" if by_chrom else outputDir + "ensemble/{caller}_header.vcf"),
    output:
        v=(temp(outputDir + "ensemble/prepended.{caller}_vars_{chrom}.vcf") if by_chrom else temp(outputDir + "ensemble/prepended.{caller}_vars.vcf")),
        h=(temp(outputDir + "ensemble/prepended.{caller}_header_{chrom}.vcf") if by_chrom else temp(outputDir + "ensemble/prepended.{caller}_header.vcf")),
    benchmark:
        outputDir + "run_times/prepend_labels/{caller}_{chrom}.tsv" if by_chrom else outputDir + "run_times/prepend_labels/{caller}.tsv"
    conda:
        "../envs/environment.yaml"
    shell:
        "scripts/prepend_labels.sh {input.v} {input.h} {wildcards.caller};"


rule recombine_headers_and_vars:
    """
    """
    input:
        v=(outputDir + "ensemble/prepended.{caller}_vars_{chrom}.vcf" if by_chrom else outputDir + "ensemble/prepended.{caller}_vars.vcf"),
        h=(outputDir + "ensemble/prepended.{caller}_header_{chrom}.vcf" if by_chrom else outputDir + "ensemble/prepended.{caller}_header.vcf"),
    output:
        g=(temp(outputDir + "ensemble/{caller}_labeled_{chrom}.vcf.gz") if by_chrom else temp(outputDir + "ensemble/{caller}_labeled.vcf.gz")),
        i=(temp(outputDir + "ensemble/{caller}_labeled_{chrom}.vcf.gz.tbi") if by_chrom else temp(outputDir + "ensemble/{caller}_labeled.vcf.gz.tbi")),
    benchmark:
        outputDir + "run_times/recombine_headers_and_vars/{caller}_{chrom}.tsv" if by_chrom else outputDir + "run_times/recombine_headers_and_vars/{caller}.tsv" # threads:
    params:
        v=(outputDir + "ensemble/{caller}_labeled_{chrom}.vcf" if by_chrom else outputDir +"ensemble/{caller}_labeled.vcf"),
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "cat {input.h} {input.v} > {params.v};"
        "bgzip {params.v}; tabix -p vcf {output.g}"


rule merge_by_variant:
    """
    Note that GATK CombineVariants and MergeVcfs were also tried here.
    MergeVCFS interleaves by row (useless).
    CombineVariants works quite nicely except that it incorrectly merges
    multi-allelics ((0/1 C>A 0/1 C>T both become 0/1 C>A,T, so you lose
    the alt2 information entirely).  This behavior is hard coded.  Usage tried:
        # 'java -jar /DCEG/CGF/Bioinformatics/Production/Bari/gatk3.7/GenomeAnalysisTK.jar -T CombineVariants -R /DCEG/CGF/Bioinformatics/Production/Bari/refGenomes/Homo_sapiens_assembly19.fasta -V:dv dv.vcf -V:hc hc.vcf  -o prioritize_dv_hc.vcf -genotypeMergeOptions PRIORITIZE -priority dv,hc'
        # 'java -jar /DCEG/CGF/Bioinformatics/Production/Bari/gatk3.7/GenomeAnalysisTK.jar -T CombineVariants -R /DCEG/CGF/Bioinformatics/Production/Bari/refGenomes/Homo_sapiens_assembly19.fasta -V:dv dv.vcf -V:hc hc.vcf  -o prioritize_hc_dv.vcf -genotypeMergeOptions PRIORITIZE -priority hc,dv'
    bcftools merge gets closest to the desired format while still
    maintaining all information in the vcf.
    """
    input:
        vcf=(expand(outputDir + "ensemble/{caller}_labeled_{{chrom}}.vcf.gz", caller=CALLERS, chrom=chromList) if by_chrom else expand(outputDir + "ensemble/{caller}_labeled.vcf.gz", caller=CALLERS)),
        vcf_index=(expand(outputDir + "ensemble/{caller}_labeled_{{chrom}}.vcf.gz.tbi", caller=CALLERS, chrom=chromList) if by_chrom else expand(outputDir + "ensemble/{caller}_labeled.vcf.gz.tbi", caller=CALLERS)),
    output:
        outputDir + "ensemble/{chrom}_all_callers.vcf.gz" if by_chrom else outputDir + "ensemble/all_callers.vcf",
    benchmark:
        outputDir + "run_times/merge_by_variant/{chrom}_all_callers.tsv" if by_chrom else outputDir + "run_times/merge_by_variant/all_callers.tsv"
    threads: threads
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "bcftools merge --force-samples --threads {threads} -m none {input.vcf} -Ov -o {output}"


rule merge_by_sample:
    """
    Note that this python script has a companion suite of unit tests in the
    scripts/ directory.
    """
    input:
        outputDir + "ensemble/{chrom}_all_callers.vcf.gz" if by_chrom else outputDir + "ensemble/all_callers.vcf",
    output:
        g=(outputDir + "ensemble/{chrom}_all_callers_merged_genotypes.vcf.gz" if by_chrom else outputDir + "ensemble/all_callers_merged_genotypes.vcf.gz"),
        i=(outputDir + "ensemble/{chrom}_all_callers_merged_genotypes.vcf.gz.tbi" if by_chrom else outputDir + "ensemble/all_callers_merged_genotypes.vcf.gz.tbi"),
    benchmark:
        outputDir + "run_times/merge_by_sample/{chrom}_all_callers_merged_genotypes.tsv" if by_chrom else outputDir + "run_times/merge_by_sample/all_callers_merged_genotypes.tsv"
    params:
        v=(outputDir + "ensemble/{chrom}_all_callers_merged_genotypes.vcf" if by_chrom else outputDir +"ensemble/all_callers_merged_genotypes.vcf"),
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "python3 scripts/genotype_union.py {input} {params.v};"
        "bgzip {params.v}; tabix -p vcf {output.g}"

rule merge_by_chr:
    input:
        g=expand(outputDir + "ensemble/{chrom}_all_callers_merged_genotypes.vcf.gz" , chrom=chromList),
        i=expand(outputDir + "ensemble/{chrom}_all_callers_merged_genotypes.vcf.gz.tbi", chrom=chromList),
    output:
        g=outputDir + "ensemble/all_callers_merged_genotypes.vcf.gz",
        i=outputDir + "ensemble/all_callers_merged_genotypes.vcf.gz.tbi",
    benchmark:
        outputDir + "run_times/merge_by_chr/all_callers_merged_genotypes.tsv"
    conda:
        "../envs/environment.yaml"
    singularity:
        "docker://quay.io/shukwong/bcftools:2020-12-09"
    shell:
        "bcftools concat -Oz -a -o {output.g} {input.g} " 
